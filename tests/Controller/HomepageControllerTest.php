<?php

namespace Controller;

use App\Controller\HomepageController;
use App\Controller\OrderOverviewController;
use App\Controller\ThankYouController;
use App\Core\Container;
use App\Core\DependencyProvider;
use App\Core\DTO\ClientDTO;
use App\Core\DTO\OrderDTO;
use App\Core\DTO\PlayerDTO;
use App\Core\SQL\SqlConnector;
use App\Model\BasketRepository;
use App\Model\ClientEntityManager;
use App\Model\ClientRepository;
use App\Model\OrderEntityManager;
use App\Model\OrderRepository;
use PHPUnit\Framework\TestCase;

class HomepageControllerTest extends TestCase
{
    public ThankYouController $thankYouController;
    public SqlConnector $sqlConnector;
    public ClientRepository $clientRepository;
    public BasketRepository $basketRepository;
    public ClientEntityManager $clientEntityManager;
    public OrderEntityManager $orderEntityManager;
    public OrderRepository $orderRepository;

    public function setUp(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->clientRepository = new ClientRepository();
        $this->sqlConnector = new SqlConnector();
        $this->basketRepository = new BasketRepository();
        $this->clientEntityManager = new ClientEntityManager();
        $this->orderEntityManager = new OrderEntityManager();
        $this->orderRepository = new OrderRepository();

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = '$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6';

        $orderDTO = new OrderDTO();
        $orderDTO->email = 'TEST@TEST.com';
        $orderDTO->firstName = 'TEST-FIRST';
        $orderDTO->lastName = 'TEST-LAST';
        $orderDTO->zip = '1337';
        $orderDTO->city = 'TEST-CITY';
        $orderDTO->address = 'TEST-ADDRESS';
        $orderDTO->paymentMethod = 'TEST-PAYMENT';
        $orderDTO->delivery = 'TEST-DELIVERY';

        $this->clientEntityManager->saveCredentials($ClientDTO);

        $this->orderEntityManager->saveOrder($orderDTO);

        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID($_SESSION['mail']));


        $containerBuilder = new Container();
        $dependencyProvider = new DependencyProvider();
        $dependencyProvider->provide($containerBuilder);

        $this->construct = new HomepageController($containerBuilder);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testDataConstruct(): void
    {
        $_GET['id'] = '3';
        $_SESSION['mail'] = 'TEST@TEST.com';

        self::assertNotEmpty($this->construct->dataConstruct()->getParameters()['players']);
        self::assertInstanceOf(PlayerDTO::class ,$this->construct->dataConstruct()->getParameters()['players'][0]);
        self::assertSame('TEST@TEST.com', $this->construct->dataConstruct()->getParameters()['user']);
        self::assertSame('homepage.twig', $this->construct->dataConstruct()->getTpl());
    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM orders;", []);
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }
}