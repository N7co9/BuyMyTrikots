<?php

namespace Model;

use App\Core\DTO\BasketDTO;
use App\Core\DTO\ClientDTO;
use App\Core\SQL\SqlConnector;
use App\Model\BasketRepository;
use App\Model\ClientEntityManager;
use App\Model\ClientRepository;
use PHPUnit\Framework\TestCase;
use function PHPUnit\Framework\assertEmpty;
use function PHPUnit\Framework\assertInstanceOf;

class ClientEntityManagerTest extends TestCase
{
    public SqlConnector $sqlConnector;
    public ClientRepository $clientRepository;
    public BasketRepository $basketRepository;
    public ClientEntityManager $clientEntityManager;
    public function setUp(): void
    {
        $this->clientRepository = new ClientRepository();
        $this->sqlConnector = new SqlConnector();
        $this->basketRepository = new BasketRepository();
        $this->clientEntityManager = new ClientEntityManager();

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = 'QWERTZ';

        $this->clientEntityManager->saveCredentials($ClientDTO);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSaveCredentials() : void
    {
        $ClientDTO = $this->clientRepository->findByMail('TEST@TEST.com');

        self::assertInstanceOf(ClientDTO::class, $ClientDTO);
        self::assertSame('TEST', $ClientDTO->username);
        self::assertSame('TEST@TEST.com', $ClientDTO->email);
        self::assertSame('QWERTZ', $ClientDTO->password);
    }

    public function testAddToBasket() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);
        $this->clientEntityManager->addToBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();

        self::assertInstanceOf(BasketDTO::class, $basket[0]);
        self::assertSame('44', $basket[0]->id);
        self::assertSame('Cristiano Ronaldo Trikot', $basket[0]->name);
        self::assertSame('1', $basket[0]->quantity);

    }

    public function testRemoveFromBasket() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);

        $this->clientEntityManager->removeFromBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();

        self::assertEmpty($basket);
    }

    public function testIncreaseQuantity() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);
        $this->clientEntityManager->addToBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();


        self::assertInstanceOf(BasketDTO::class, $basket[0]);
        self::assertSame('2', $basket[0]->quantity);
    }

    public function testDecreaseQuantityOnce() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);
        $this->clientEntityManager->addToBasket('44', $userID);

        $this->clientEntityManager->removeFromBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();


        self::assertInstanceOf(BasketDTO::class, $basket[0]);
        self::assertSame('1', $basket[0]->quantity);
    }

    public function testDecreaseQuantityRemove() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);

        $this->clientEntityManager->removeFromBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();


        self::assertEmpty($basket);
    }

    public function testDecreaseQuantityAlreadyNull() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);

        $this->clientEntityManager->removeFromBasket('44', $userID);
        $this->clientEntityManager->removeFromBasket('44', $userID);

        $basket = $this->basketRepository->getBasketInfo();


        self::assertEmpty($basket);
    }

    public function testEmptyBasket() : void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $userID = $this->clientRepository->getUserID($_SESSION['mail']);

        $this->clientEntityManager->addToBasket('44', $userID);
        $this->clientEntityManager->addToBasket('100', $userID);
        $this->clientEntityManager->addToBasket('1337', $userID);

        $this->clientEntityManager->emptyBasket();

        $basket = $this->basketRepository->getBasketInfo();

        self::assertEmpty($basket);
    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }
}