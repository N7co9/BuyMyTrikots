<?php

namespace Model;

use App\Core\DTO\BasketDTO;
use App\Core\DTO\ClientDTO;
use App\Core\SQL\SqlConnector;
use App\Model\BasketRepository;
use App\Model\ClientEntityManager;
use App\Model\ClientRepository;
use PHPUnit\Framework\TestCase;

class ClientRepositoryTest extends TestCase
{
    public SqlConnector $sqlConnector;
    public ClientRepository $clientRepository;
    public BasketRepository $basketRepository;
    public ClientEntityManager $clientEntityManager;

    public function setUp(): void
    {
        $this->clientRepository = new ClientRepository();
        $this->sqlConnector = new SqlConnector();
        $this->basketRepository = new BasketRepository();
        $this->clientEntityManager = new ClientEntityManager();

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = '$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6';

        $this->clientEntityManager->saveCredentials($ClientDTO);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testFindByMail(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';
        $ClientDTO = $this->clientRepository->findByMail($_SESSION['mail']);


        self::assertInstanceOf(ClientDTO::class, $ClientDTO);
        self::assertSame('TEST', $ClientDTO->username);
        self::assertSame('TEST@TEST.com', $ClientDTO->email);
        self::assertSame('$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6', $ClientDTO->password);
    }

    public function testCheckLoginCredentials(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $ClientDTO = new ClientDTO();
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = 'Xyz12345*';

        $bool = $this->clientRepository->checkLoginCredentials($ClientDTO);

        self::assertTrue($bool);
    }

    public function testCheckLoginCredentialsInvalid(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $ClientDTO = new ClientDTO();
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = 'INVALID-PASSWORD*';

        $bool = $this->clientRepository->checkLoginCredentials($ClientDTO);

        self::assertFalse($bool);
    }

    public function testGetBasketContent(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID($_SESSION['mail']));

        $basket = $this->clientRepository->getBasketContent($this->clientRepository->getUserID($_SESSION['mail']));

        self::assertSame('44', $basket[0]['item_id']);
    }

    public function testGetUserID(): void
    {
        $id = $this->clientRepository->getUserID('TEST@TEST.com');

        self::assertIsInt($id);
        self::assertNotEmpty($id);
    }

    public function testGetUserIDInvalid(): void
    {
        $id = $this->clientRepository->getUserID('INVALID');

        self::assertNull($id);
    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }
}