<?php

namespace Model;

use App\Global\Business\DTO\ClientDTO;
use App\Global\Business\Provider\OrderItemProvider;
use App\Global\Persistence\Repository\ClientRepository;
use App\Global\Persistence\Repository\OrderRepository;
use App\Global\Persistence\Repository\PlayerRepository;
use App\Global\Persistence\SQL\SqlConnector;
use App\User\Components\Order\Persistence\Entity\OrderEntityManager;
use App\User\Components\Registration\Persistence\Entity\ClientEntityManager;
use PHPUnit\Framework\TestCase;

class OrderItemProviderTest extends TestCase
{
    public ClientEntityManager $clientEntityManager;
    public OrderRepository $orderRepository;
    public SqlConnector $sqlConnector;
    public OrderEntityManager $orderEntityManager;
    public ClientRepository $clientRepository;
    public OrderItemProvider $itemProvider;

    public function setUp(): void
    {
        $this->clientRepository = new ClientRepository();
        $this->sqlConnector = new SqlConnector();
        $this->clientEntityManager = new ClientEntityManager();
        $this->playerRepository = new PlayerRepository();
        $this->orderRepository = new OrderRepository();
        $this->orderEntityManager = new OrderEntityManager();
        $this->itemProvider = new OrderItemProvider();

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = '$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6';

        $this->clientEntityManager->saveCredentials($ClientDTO);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetItemsSingleQuantity(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID('TEST@TEST.com'));

        $items = $this->itemProvider->getItems();

        self::assertSame([
            'id' => '44',
            'quantity' => '1',
        ], $items);
    }

    public function testGetItemsHigherQuantity(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID('TEST@TEST.com'));
        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID('TEST@TEST.com'));
        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID('TEST@TEST.com'));
        $this->clientEntityManager->addToBasket('44', $this->clientRepository->getUserID('TEST@TEST.com'));



        $items = $this->itemProvider->getItems();

        self::assertSame([
            'id' => '44',
            'quantity' => '4',
        ], $items);
    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM orders;", []);
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }
}