<?php

namespace Model;

use App\Components\Basket\Persistence\Entity\BasketEntityManager;
use App\Components\Homepage\Persistence\Repository\PlayerRepository;
use App\Components\Order\Persistence\Entity\OrderEntityManager;
use App\Components\Order\Persistence\Repository\OrderRepository;
use App\Components\UserRegistration\Persistence\UserEntityManager;
use App\Components\UserSession\Persistence\UserRepository;
use App\Global\Business\Dependency\Container;
use App\Global\Business\Dependency\DependencyProvider;
use App\Global\Business\DTO\ClientDTO;
use App\Global\Business\Provider\OrderItemProvider;
use App\Global\Persistence\SQL\SqlConnector;
use PHPUnit\Framework\TestCase;

class OrderItemProviderTest extends TestCase
{
    public UserEntityManager $userEntityManager;
    public OrderRepository $orderRepository;
    public SqlConnector $sqlConnector;
    public OrderEntityManager $orderEntityManager;
    public UserRepository $userRepository;
    public BasketEntityManager $basketEntityManager;
    public OrderItemProvider $itemProvider;

    public function setUp(): void
    {
        $container = new Container();
        $provider = new DependencyProvider();
        $provider->provide($container);

        $this->userRepository = $container->get(UserRepository::class);
        $this->sqlConnector = $container->get(SqlConnector::class);
        $this->userEntityManager = $container->get(UserEntityManager::class);
        $this->basketEntityManager = $container->get(BasketEntityManager::class);
        $this->playerRepository = $container->get(PlayerRepository::class);
        $this->orderRepository = $container->get(OrderRepository::class);
        $this->orderEntityManager = $container->get(OrderEntityManager::class);
        $this->itemProvider = $container->get(OrderItemProvider::class);

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = '$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6';

        $this->userEntityManager->saveCredentials($ClientDTO);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetItemsSingleQuantity(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->basketEntityManager->addToBasket('44', $this->userRepository->getUserID('TEST@TEST.com'));

        $items = $this->itemProvider->getItems();

        self::assertSame([
            'id' => '44',
            'quantity' => '1',
        ], $items);
    }

    public function testGetItemsHigherQuantity(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $this->basketEntityManager->addToBasket('44', $this->userRepository->getUserID('TEST@TEST.com'));
        $this->basketEntityManager->addToBasket('44', $this->userRepository->getUserID('TEST@TEST.com'));
        $this->basketEntityManager->addToBasket('44', $this->userRepository->getUserID('TEST@TEST.com'));
        $this->basketEntityManager->addToBasket('44', $this->userRepository->getUserID('TEST@TEST.com'));



        $items = $this->itemProvider->getItems();

        self::assertSame([
            'id' => '44',
            'quantity' => '4',
        ], $items);
    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM orders;", []);
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }
}