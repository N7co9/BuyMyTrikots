<?php

namespace Core\Validation;

use App\Core\DTO\ErrorDTO;
use App\Core\DTO\OrderDTO;
use App\Core\Redirect\Redirect;
use App\Core\Redirect\RedirectSpy;
use App\Core\Validation\BillingValidator;
use PHPUnit\Framework\TestCase;

class BillingValidatorTest extends TestCase
{
    public BillingValidator $billingValidator;

    public function setUp(): void
    {
        $this->redirectSpy = new RedirectSpy();
        $this->billingValidator = new BillingValidator($this->redirectSpy);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testValidatePositive(): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = '12345';
        $billingDTO->city = 'TEST-CITY';
        $billingDTO->address = 'TEST-ADDRESS';
        $billingDTO->firstName = 'TEST-FIRST';
        $billingDTO->lastName = 'TEST-LAST';


        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertEmpty($errorArray);
    }

    public function testValidateMultipleExceptions(): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = '12345';
        $billingDTO->city = 'TEST-CITY';
        $billingDTO->address = 'TEST-ADDRESS';
        $billingDTO->firstName = '';
        $billingDTO->lastName = '';


        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertInstanceOf(ErrorDTO::class, $errorArray[1]);
        self::assertSame('Oops, your last name doesn\'t look right!', $errorArray[0]->message);
        self::assertSame('Oops, your first name doesn\'t look right!', $errorArray[1]->message);

    }

    /**
     * @dataProvider lastNameDataProvider
     */
    public function testValidateLastNameException(array $billingData, string $errorMessage): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = $billingData['zip'];
        $billingDTO->city = $billingData['city'];
        $billingDTO->address = $billingData['address'];
        $billingDTO->firstName = $billingData['firstName'];
        $billingDTO->lastName = $billingData['lastName'];

        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertSame($errorMessage, $errorArray[0]->message);
    }

    public static function lastNameDataProvider(): array
    {
        return [
            'Empty Last Name' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => ''
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Too Short Last Name - ab' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'ab'
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Too Short Last Name - a' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'a'
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Too Long Last Name - 30 chars' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Last Name With Caret' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => '1abc DEF- '
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Very Long Last Name' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw'
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
            'Last Name With Exception Characters' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'CharacterExcepti!!on1111'
                ],
                'errorMessage' => 'Oops, your last name doesn\'t look right!'
            ],
        ];
    }

    /**
     * @dataProvider firstNameDataProvider
     */
    public function testValidateFirstNameException(array $billingData, string $errorMessage): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = $billingData['zip'];
        $billingDTO->city = $billingData['city'];
        $billingDTO->address = $billingData['address'];
        $billingDTO->firstName = $billingData['firstName'];
        $billingDTO->lastName = $billingData['lastName'];

        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertSame($errorMessage, $errorArray[0]->message);
    }

    public static function firstNameDataProvider(): array
    {
        return [
            'Empty First Name' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => '',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'Too Short First Name - ab' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'ab',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'Too Short First Name - a' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'a',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'Too Long First Name' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'Too Long First Name - 30 chars' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'First Name With Characters' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'Characters!!111',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
            'First Name With Caret' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => '1abc DEF- ',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your first name doesn\'t look right!'
            ],
        ];
    }

    /**
     * @dataProvider cityDataProvider
     */
    public function testValidateCityException(array $billingData, string $errorMessage): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = $billingData['zip'];
        $billingDTO->city = $billingData['city'];
        $billingDTO->address = $billingData['address'];
        $billingDTO->firstName = $billingData['firstName'];
        $billingDTO->lastName = $billingData['lastName'];

        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertSame($errorMessage, $errorArray[0]->message);
    }

    public static function cityDataProvider(): array
    {
        return [
            'Empty City' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => '',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'Too Short City' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'ab',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'Too Long City' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'Too Long City - 20 chars' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'aaaaaaaaaaaaaaaaaaaa',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'City With Characters' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => '###!!!LOL123',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'City With Caret' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => '1abc DEF- ',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
            'City With Dollar' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'New York123',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your City doesn\'t look right!'
            ],
        ];
    }

    /**
     * @dataProvider zipDataProvider
     */
    public function testValidateZipException(array $billingData, string $errorMessage): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = $billingData['zip'];
        $billingDTO->city = $billingData['city'];
        $billingDTO->address = $billingData['address'];
        $billingDTO->firstName = $billingData['firstName'];
        $billingDTO->lastName = $billingData['lastName'];

        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertSame($errorMessage, $errorArray[0]->message);
    }

    public static function zipDataProvider(): array
    {
        return [
            'Too Short Zip' => [
                'billingData' => [
                    'zip' => '1',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Zip-Code doesn\'t look right!'
            ],
            'Too Long Zip' => [
                'billingData' => [
                    'zip' => '12345678',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Zip-Code doesn\'t look right!'
            ],
            'Zip With Characters' => [
                'billingData' => [
                    'zip' => 'abcde',
                    'city' => 'TEST-CITY',
                    'address' => 'TEST-ADDRESS',
                    'firstName' => 'TEST-FIRST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Zip-Code doesn\'t look right!'
            ],
        ];
    }

    /**
     * @dataProvider addressDataProvider
     */
    public function testValidateAddressException(array $billingData, string $errorMessage): void
    {
        $_POST['first_name'] = '';
        $billingDTO = new OrderDTO();

        $billingDTO->zip = $billingData['zip'];
        $billingDTO->city = $billingData['city'];
        $billingDTO->address = $billingData['address'];
        $billingDTO->firstName = $billingData['firstName'];
        $billingDTO->lastName = $billingData['lastName'];

        $errorArray = $this->billingValidator->validate($billingDTO);

        self::assertInstanceOf(ErrorDTO::class, $errorArray[0]);
        self::assertSame($errorMessage, $errorArray[0]->message);
    }

    public static function addressDataProvider(): array
    {
        return [
            'Too Short Address - aa' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'aa',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Too Short Address - a' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'a',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Too Long Address' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Address Too Long 20' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'aaaaaaaaaaaaaaaaaaaa',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Address Special Characters' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => '1234ahsj!!',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Address ValidStart123' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => 'ValidStart123',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
            'Address Caret' => [
                'billingData' => [
                    'zip' => '12345',
                    'city' => 'TEST-CITY',
                    'address' => '1abc DEF- ',
                    'firstName' => 'TEST-LAST',
                    'lastName' => 'TEST-LAST'
                ],
                'errorMessage' => 'Oops, your Address doesn\'t look right!'
            ],
        ];
    }


    public function testRedirectIfValid(): void
    {
        $_POST['delivery'] = '';
        $array = [];

        $this->billingValidator->redirectIfValid($array);

        self::assertSame('?page=order-overview', $this->billingValidator->redirect->location);
    }

    public function testRedirectIfValidExceptionNoPost(): void
    {
        $array = [];

        $this->billingValidator->redirectIfValid($array);

        self::assertEmpty($this->billingValidator->redirect->location);
    }

    public function testRedirectIfValidExceptionErrorArrayNotEmpty(): void
    {
        $_POST['delivery'] = '';
        $array = [new ErrorDTO('ERROR')];

        $this->billingValidator->redirectIfValid($array);

        self::assertEmpty($this->billingValidator->redirect->location);
    }

    public function testTrimWhiteSpaces(): void
    {
        $trim = '    leading spaces';
        $trim = $this->billingValidator->trim($trim);

        self::assertSame('leading spaces', $trim);
    }

    public function tearDown(): void
    {
        unset ($_POST['delivery']);
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

}