<?php

namespace Core;

use App\Core\DTO\ClientDTO;
use App\Core\SQL\SqlConnector;
use App\Core\TotalCalculator;
use App\Model\BasketRepository;
use App\Model\ClientEntityManager;
use App\Model\ClientRepository;
use App\Model\OrderEntityManager;
use App\Model\OrderRepository;
use PHPUnit\Framework\TestCase;

class TotalCalculatorTest extends TestCase
{
    public SqlConnector $sqlConnector;
    public ClientRepository $clientRepository;
    public BasketRepository $basketRepository;
    public ClientEntityManager $clientEntityManager;
    public OrderEntityManager $orderEntityManager;
    public OrderRepository $orderRepository;
    public TotalCalculator $totalCalculator;

    public function setUp(): void
    {
        $this->clientRepository = new ClientRepository();
        $this->sqlConnector = new SqlConnector();
        $this->basketRepository = new BasketRepository();
        $this->clientEntityManager = new ClientEntityManager();
        $this->orderEntityManager = new OrderEntityManager();
        $this->orderRepository = new OrderRepository();
        $this->totalCalculator = new TotalCalculator();

        $ClientDTO = new ClientDTO();
        $ClientDTO->username = 'TEST';
        $ClientDTO->email = 'TEST@TEST.com';
        $ClientDTO->password = '$2y$10$hfMft79lTEeHSDGsMf91s.iJcUTgVoIHnUQVGfxleSTXARmpr7nN6';

        $this->clientEntityManager->saveCredentials($ClientDTO);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCalculateTotal(): void
    {
        $_SESSION['mail'] = 'TEST@TEST.com';

        $_SESSION['delivery'] = 'DHL';
        $totalDHL = $this->totalCalculator->calculateTotal();

        $_SESSION['delivery'] = 'DPD';
        $totalDPD = $this->totalCalculator->calculateTotal();

        $_SESSION['delivery'] = 'FedEX';
        $totalFedEX = $this->totalCalculator->calculateTotal();

        self::assertSame(4.95, $totalDHL);
        self::assertSame(3.95, $totalDPD);
        self::assertSame(9.95, $totalFedEX);

    }

    public function tearDown(): void
    {
        $connector = new SqlConnector();
        $connector->executeDeleteQuery("DELETE FROM orders;", []);
        $connector->executeDeleteQuery("DELETE FROM user_baskets;", []);
        $connector->executeDeleteQuery("DELETE FROM users;", []);
        $connector->closeConnection();
        parent::tearDown();
    }

}